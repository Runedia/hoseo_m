require("module-alias/register");

const axios = require("axios");
const cheerio = require("cheerio");
const fs = require("fs-extra");
const path = require("path");
const pool = require("@root/utils/db");
const logger = require("@root/utils/logger");

const BASE_URL = "https://happydorm.hoseo.ac.kr";
const DOWNLOAD_ROOT = path.resolve(process.cwd(), "download_happy_dorm");
const headers = {
  "User-Agent":
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
    "AppleWebKit/537.36 (KHTML, like Gecko) " +
    "Chrome/124.0.0.0 Safari/537.36",
  Accept: "*/*",
  Referer: BASE_URL + "/",
};

// 파일명 안전 변환 함수
function safeFilename(name, fallbackExt = ".bin") {
  if (!name || name.trim() === "") {
    return `file_${Date.now()}${fallbackExt}`;
  }

  let ext = path.extname(name);
  if (!ext) ext = fallbackExt;

  let base = name.replace(/[\\/:*?"<>|]+/g, "_").trim();
  if (!base.endsWith(ext)) base += ext;

  return base;
}

// 파일 다운로드 함수
async function downloadFile(fileUrl, destPath) {
  if (fileUrl.startsWith("/")) {
    fileUrl = BASE_URL + fileUrl;
  }

  const writer = fs.createWriteStream(destPath);
  const response = await axios({
    url: fileUrl,
    method: "GET",
    responseType: "stream",
    headers,
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });
}

// 파일 다운로드 + DB 저장
async function downloadFileAndSaveDB(menuNum, fileType, fileUrl, originName, downloadDir) {
  const filenameSafe = safeFilename(originName, fileType === "image" ? ".jpg" : ".pdf");
  const localFilePath = path.join(downloadDir, filenameSafe);
  const relativeFilePath = path.relative(process.cwd(), localFilePath);

  // URL용 경로 (슬래시로 변환)
  const urlPath = relativeFilePath.replace(/\\/g, "/");

  // 파일 다운로드
  await downloadFile(fileUrl, localFilePath);

  // DB 저장(tbl_menufile) - 행복기숙사용 테이블명 수정 필요시 변경
  await pool.execute(
    `INSERT INTO tbl_menufile (menu_num, file_type, file_name, origin_name, file_path, file_url)
     VALUES (?, ?, ?, ?, ?, ?)
     ON DUPLICATE KEY UPDATE 
     file_type = VALUES(file_type),
     file_name = VALUES(file_name),
     origin_name = VALUES(origin_name),
     file_path = VALUES(file_path),
     file_url = VALUES(file_url)`,
    [menuNum, fileType, filenameSafe, originName, urlPath, fileUrl]
  );

  return {
    filename: filenameSafe,
    localpath: urlPath,
    fullPath: localFilePath,
  };
}

// 첨부파일 처리 함수 (행복기숙사 API 방식)
async function processAttachments(idx, downloadDir) {
  const attachments = [];

  try {
    // 행복기숙사의 첨부파일 API 호출
    const fileApiUrl = `${BASE_URL}/fileload?idx=${idx}&table=board&rev=4`;
    const response = await axios.get(fileApiUrl, { headers });
    const fileData = response.data;

    if (Array.isArray(fileData) && fileData.length > 0) {
      const downloadPromises = [];

      for (const file of fileData) {
        const fileUrl = file.file_url;
        const originName = file.file_original_name;

        attachments.push({
          originUrl: fileUrl,
          originName: originName,
          localPath: null,
          fileName: null,
        });

        downloadPromises.push(
          downloadFileAndSaveDB(idx, "attachment", fileUrl, originName, downloadDir)
            .then((result) => {
              // attachments 배열의 해당 항목 업데이트
              const attachmentIndex = attachments.findIndex((att) => att.originUrl === fileUrl);
              if (attachmentIndex !== -1) {
                attachments[attachmentIndex].localPath = result.localpath;
                attachments[attachmentIndex].fileName = result.filename;
              }
            })
            .catch((e) => {
              console.error(`[${idx}] 첨부파일 다운로드 오류 (${originName}):`, e.message);
            })
        );
      }

      await Promise.all(downloadPromises);
    }
  } catch (err) {
    console.warn(`[${idx}] 첨부파일 API 호출 실패:`, err.message);
  }

  return attachments;
}

// 이미지 처리 함수 (행복기숙사 특수 URL 처리)
async function processImages($, boardElement, idx, downloadDir) {
  const imagePromises = [];
  const assets = [];
  let imageIndex = 0;

  boardElement.find("img").each((i, el) => {
    const $img = $(el);
    let src = $img.attr("src");

    if (!src) return;

    imageIndex++;

    // 행복기숙사 이미지 URL 처리 (/api/image/imgdownload?hash=...)
    let filename;
    if (src.includes("/api/image/imgdownload")) {
      // hash 값에서 파일명 생성
      const hashMatch = src.match(/hash=([a-f0-9]+)/);
      const idxMatch = src.match(/idx=(\d+)/);
      if (hashMatch && idxMatch) {
        filename = `image_${idxMatch[1]}_${hashMatch[1].substring(0, 8)}.jpg`;
      } else {
        filename = `image_${imageIndex}.jpg`;
      }
    } else {
      // 일반 이미지 URL 처리
      const baseName = path.basename(src.split("?")[0]);
      filename = safeFilename(baseName || `image_${imageIndex}.jpg`, ".jpg");
    }

    const fileUrl = src.startsWith("/") ? BASE_URL + src : src;

    // 이미지 다운로드 및 DB 저장
    imagePromises.push(
      downloadFileAndSaveDB(idx, "image", fileUrl, filename, downloadDir)
        .then((result) => {
          // img src 경로를 로컬 파일명으로 변경
          $img.attr("src", result.filename);

          // assets 배열에 추가
          assets.push({
            localPath: result.localpath,
            fileName: result.filename,
          });
        })
        .catch((e) => {
          console.error(`[${idx}] 이미지 다운로드 오류 (${filename}):`, e.message);
        })
    );
  });

  await Promise.all(imagePromises);
  return assets;
}

// 메뉴 다운로드 상태 업데이트
async function updateMenuDownloadStatus(idx, isSuccess, errorMessage = null) {
  try {
    await pool.execute(
      `UPDATE TBL_Menu 
       SET download_completed = ?, 
           download_date = NOW(),
           download_error = ?
       WHERE chidx = ? AND type = 'HAPPY_DORM_NUTRITION'`,
      [isSuccess ? 1 : 0, errorMessage, idx]
    );
  } catch (e) {
    logger.error(`DB 상태 업데이트 실패 [${idx}]: ${e.message}`);
  }
}

// 통합 메뉴 처리 함수
async function parseAndSaveHappyDormMenu(idx) {
  try {
    const url = `${BASE_URL}/board/nutrition/view?idx=${idx}`;
    console.log(`[${idx}] 요청 URL: ${url}`);

    const { data: html } = await axios.get(url, { headers });
    console.log(`[${idx}] 응답 받음 - HTML 길이: ${html.length}바이트`);

    const $ = cheerio.load(html);

    // 페이지 기본 정보 출력
    const pageTitle = $("title").text();
    console.log(`[${idx}] 페이지 제목: "${pageTitle}"`);

    // 에러 페이지인지 확인 (더 정확한 조건으로 수정)
    if (
      html.includes("404 Not Found") ||
      html.includes("Page not found") ||
      pageTitle.includes("404") ||
      pageTitle.includes("Not Found") ||
      html.includes("<h1>404</h1>") ||
      html.includes("HTTP 404")
    ) {
      console.log(`[${idx}] ❌ 404 에러 페이지로 보임`);
      throw new Error("404 페이지");
    }

    console.log(`[${idx}] HTML 구조 분석 시작...`);

    // 행복기숙사 본문 영역 추출 (여러 선택자 시도)
    const possibleSelectors = [
      ".board_view", // 실제 내용이 있는 클래스 (언더스코어)
      ".board-view", // 하이픈 버전
      ".board-content", // 기존 시도했던 클래스
      ".content",
      ".view-content",
      ".post-content",
      ".article-content",
      ".detail-content",
      ".nutrition-content",
      ".board-detail",
      ".view-area",
      ".content-area",
      ".main-content",
      "#content",
      "#board-content",
      ".board_content",
      ".view_content",
    ];

    let boardContent = null;
    let usedSelector = null;

    // 각 선택자를 시도해서 유효한 내용이 있는 요소 찾기
    for (const selector of possibleSelectors) {
      const element = $(selector);
      if (element.length > 0 && element.html() && element.text().trim()) {
        boardContent = element;
        usedSelector = selector;
        console.log(`[${idx}] 본문 영역 발견: ${selector}`);
        break;
      }
    }

    // 특정 선택자로도 못 찾으면 div 태그 중에서 텍스트가 많은 것 찾기
    if (!boardContent) {
      console.log(`[${idx}] 기본 선택자로 본문을 찾을 수 없음. 대안 방법 시도...`);

      // 1. 모든 div 요소 중에서 가장 긴 텍스트 찾기
      let bestDiv = null;
      let maxTextLength = 0;

      $("div").each((i, el) => {
        const $div = $(el);
        const text = $div.text().trim();
        if (text.length > maxTextLength && text.length > 50) {
          maxTextLength = text.length;
          bestDiv = $div;
        }
      });

      if (bestDiv && maxTextLength > 100) {
        boardContent = bestDiv;
        usedSelector = "div (최대 텍스트)";
        console.log(`[${idx}] 가장 긴 텍스트를 가진 div 사용 (${maxTextLength}자)`);
      }

      // 2. 그래도 없으면 body 태그 전체 사용
      if (!boardContent) {
        const bodyContent = $("body");
        if (bodyContent.length > 0 && bodyContent.text().trim().length > 100) {
          boardContent = bodyContent;
          usedSelector = "body (전체)";
          console.log(`[${idx}] body 태그 전체 사용 (${bodyContent.text().trim().length}자)`);
        }
      }

      // 3. 마지막으로 main, article, section 태그 시도
      if (!boardContent) {
        const alternativeTags = ["main", "article", "section"];
        for (const tag of alternativeTags) {
          const element = $(tag);
          if (element.length > 0 && element.text().trim().length > 50) {
            boardContent = element;
            usedSelector = tag;
            console.log(`[${idx}] ${tag} 태그 사용 (${element.text().trim().length}자)`);
            break;
          }
        }
      }
    }

    if (!boardContent || !boardContent.html() || !boardContent.text().trim()) {
      // 디버깅 정보 출력
      console.log(`[${idx}] HTML 구조 디버깅:`);
      console.log(`  - 페이지 제목: ${$("title").text()}`);
      console.log(`  - HTML 길이: ${html.length}`);
      console.log(`  - div 개수: ${$("div").length}`);
      console.log(`  - p 개수: ${$("p").length}`);
      console.log(`  - article 개수: ${$("article").length}`);
      console.log(`  - section 개수: ${$("section").length}`);
      console.log(`  - main 개수: ${$("main").length}`);

      // 클래스명 출력
      const classes = new Set();
      $("*[class]").each((i, el) => {
        const classList = $(el).attr("class").split(" ");
        classList.forEach((cls) => {
          if (cls.trim()) classes.add(cls.trim());
        });
      });

      const relevantClasses = Array.from(classes).filter(
        (cls) =>
          cls.includes("content") ||
          cls.includes("board") ||
          cls.includes("view") ||
          cls.includes("post") ||
          cls.includes("article") ||
          cls.includes("nutrition")
      );
      console.log(`  - 관련 클래스: ${relevantClasses.join(", ")}`);

      // ID 출력
      const ids = [];
      $("*[id]").each((i, el) => {
        const id = $(el).attr("id");
        if (id) ids.push(id);
      });
      console.log(`  - 모든 ID: ${ids.join(", ")}`);

      // HTML 내용 일부 출력 (디버깅용)
      console.log(`  - HTML 시작 부분 (500자):`);
      console.log(html.substring(0, 500));
      console.log(`  - HTML 끝 부분 (500자):`);
      console.log(html.substring(html.length - 500));

      logger.warn(`본문 영역을 찾을 수 없음 [${idx}]`);
      await updateMenuDownloadStatus(idx, false, "본문 영역을 찾을 수 없음");
      throw new Error("본문 영역을 찾을 수 없습니다.");
    }

    console.log(`[${idx}] 사용된 선택자: ${usedSelector}`);

    logger.info(`📥 행복기숙사 처리 시작 [${idx}]`);

    // 저장 디렉토리 생성
    const menuDownloadDir = path.join(DOWNLOAD_ROOT, String(idx));
    await fs.ensureDir(menuDownloadDir);

    // 첨부파일 처리 (API 방식)
    console.log(`[${idx}] 첨부파일 처리 중...`);
    const attachments = await processAttachments(idx, menuDownloadDir);

    // 이미지 처리 (HTML 수정 포함)
    console.log(`[${idx}] 이미지 처리 중...`);
    const assets = await processImages($, boardContent, idx, menuDownloadDir);

    // HTML 파일 저장 (수정된 이미지 경로 포함)
    const htmlFilePath = path.join(menuDownloadDir, `${idx}.html`);
    await fs.writeFile(htmlFilePath, boardContent.html(), {
      encoding: "utf-8",
    });

    // JSON 메타데이터 저장
    const jsonResult = {
      idx: idx,
      type: "HAPPY_DORM_NUTRITION",
      content: `download_happy_dorm/${idx}/${idx}.html`,
      assets: assets,
      attachments: attachments,
    };

    const jsonFilePath = path.join(menuDownloadDir, `${idx}_detail.json`);
    await fs.writeFile(jsonFilePath, JSON.stringify(jsonResult, null, 2), "utf-8");

    // DB에 완료 상태 업데이트
    await updateMenuDownloadStatus(idx, true);

    console.log(`[${idx}] ✅ 완료: HTML(${assets.length}개 이미지), JSON, ${attachments.length}개 첨부파일, DB 저장`);

    return jsonResult;
  } catch (err) {
    console.error(`[${idx}] ❌ 에러:`, err.message);
    // 실패 상태도 DB에 기록
    await updateMenuDownloadStatus(idx, false, err.message);
    throw err;
  }
}

// 행복기숙사 메인 실행 함수
async function runHappyDormDetailScraper() {
  try {
    // DB에서 아직 다운로드되지 않은 행복기숙사 메뉴 목록 가져오기
    const sql = `
      SELECT chidx FROM TBL_Menu 
      WHERE type = 'HAPPY_DORM_NUTRITION' 
        AND (download_completed IS NULL OR download_completed = 0)
      ORDER BY chidx DESC 
      LIMIT 10
    `;

    const [result] = await pool.query(sql);
    const menuList = result.map((r) => r.chidx);

    console.log(`총 ${menuList.length}개의 행복기숙사 메뉴를 처리합니다.`);

    if (menuList.length === 0) {
      console.log("처리할 행복기숙사 메뉴가 없습니다.");
      return;
    }

    // 메뉴별로 상세 크롤링/파싱
    let successCount = 0;
    let failCount = 0;

    for (const idx of menuList) {
      try {
        await parseAndSaveHappyDormMenu(idx);
        successCount++;

        // 요청 간격 조절 (서버 부하 방지)
        await new Promise((resolve) => setTimeout(resolve, 1000));
      } catch (e) {
        console.error(`❌ idx=${idx} 처리 실패:`, e.message);
        failCount++;
      }
    }

    console.log(`\n=== 행복기숙사 처리 완료 ===`);
    console.log(`성공: ${successCount}개`);
    console.log(`실패: ${failCount}개`);
    console.log(`총계: ${successCount + failCount}개`);
  } catch (error) {
    console.error("행복기숙사 메인 프로세스 오류:", error);
  }
}

// 직접 실행될 때만 메인 함수 호출
if (require.main === module) {
  (async () => {
    try {
      await runHappyDormDetailScraper();
    } catch (err) {
      console.error("❌ 전체 처리 중 오류:", err.message);
    } finally {
      pool.end();
    }
  })();
}

// export for use in other modules
module.exports = {
  parseAndSaveHappyDormMenu,
  runHappyDormDetailScraper,
};

